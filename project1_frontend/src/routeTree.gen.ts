/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UserticketsImport } from './routes/user_tickets'
import { Route as UseroptionsImport } from './routes/user_options'
import { Route as PendingticketsImport } from './routes/pending_tickets'
import { Route as ManagersloginImport } from './routes/managers_login'
import { Route as ManageroptionsImport } from './routes/manager_options'
import { Route as EmployeesloginImport } from './routes/employees_login'
import { Route as AlluserslistImport } from './routes/all_users_list'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const UserticketsRoute = UserticketsImport.update({
  id: '/user_tickets',
  path: '/user_tickets',
  getParentRoute: () => rootRoute,
} as any)

const UseroptionsRoute = UseroptionsImport.update({
  id: '/user_options',
  path: '/user_options',
  getParentRoute: () => rootRoute,
} as any)

const PendingticketsRoute = PendingticketsImport.update({
  id: '/pending_tickets',
  path: '/pending_tickets',
  getParentRoute: () => rootRoute,
} as any)

const ManagersloginRoute = ManagersloginImport.update({
  id: '/managers_login',
  path: '/managers_login',
  getParentRoute: () => rootRoute,
} as any)

const ManageroptionsRoute = ManageroptionsImport.update({
  id: '/manager_options',
  path: '/manager_options',
  getParentRoute: () => rootRoute,
} as any)

const EmployeesloginRoute = EmployeesloginImport.update({
  id: '/employees_login',
  path: '/employees_login',
  getParentRoute: () => rootRoute,
} as any)

const AlluserslistRoute = AlluserslistImport.update({
  id: '/all_users_list',
  path: '/all_users_list',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/all_users_list': {
      id: '/all_users_list'
      path: '/all_users_list'
      fullPath: '/all_users_list'
      preLoaderRoute: typeof AlluserslistImport
      parentRoute: typeof rootRoute
    }
    '/employees_login': {
      id: '/employees_login'
      path: '/employees_login'
      fullPath: '/employees_login'
      preLoaderRoute: typeof EmployeesloginImport
      parentRoute: typeof rootRoute
    }
    '/manager_options': {
      id: '/manager_options'
      path: '/manager_options'
      fullPath: '/manager_options'
      preLoaderRoute: typeof ManageroptionsImport
      parentRoute: typeof rootRoute
    }
    '/managers_login': {
      id: '/managers_login'
      path: '/managers_login'
      fullPath: '/managers_login'
      preLoaderRoute: typeof ManagersloginImport
      parentRoute: typeof rootRoute
    }
    '/pending_tickets': {
      id: '/pending_tickets'
      path: '/pending_tickets'
      fullPath: '/pending_tickets'
      preLoaderRoute: typeof PendingticketsImport
      parentRoute: typeof rootRoute
    }
    '/user_options': {
      id: '/user_options'
      path: '/user_options'
      fullPath: '/user_options'
      preLoaderRoute: typeof UseroptionsImport
      parentRoute: typeof rootRoute
    }
    '/user_tickets': {
      id: '/user_tickets'
      path: '/user_tickets'
      fullPath: '/user_tickets'
      preLoaderRoute: typeof UserticketsImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/all_users_list': typeof AlluserslistRoute
  '/employees_login': typeof EmployeesloginRoute
  '/manager_options': typeof ManageroptionsRoute
  '/managers_login': typeof ManagersloginRoute
  '/pending_tickets': typeof PendingticketsRoute
  '/user_options': typeof UseroptionsRoute
  '/user_tickets': typeof UserticketsRoute
  '/about': typeof AboutLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/all_users_list': typeof AlluserslistRoute
  '/employees_login': typeof EmployeesloginRoute
  '/manager_options': typeof ManageroptionsRoute
  '/managers_login': typeof ManagersloginRoute
  '/pending_tickets': typeof PendingticketsRoute
  '/user_options': typeof UseroptionsRoute
  '/user_tickets': typeof UserticketsRoute
  '/about': typeof AboutLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/all_users_list': typeof AlluserslistRoute
  '/employees_login': typeof EmployeesloginRoute
  '/manager_options': typeof ManageroptionsRoute
  '/managers_login': typeof ManagersloginRoute
  '/pending_tickets': typeof PendingticketsRoute
  '/user_options': typeof UseroptionsRoute
  '/user_tickets': typeof UserticketsRoute
  '/about': typeof AboutLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/all_users_list'
    | '/employees_login'
    | '/manager_options'
    | '/managers_login'
    | '/pending_tickets'
    | '/user_options'
    | '/user_tickets'
    | '/about'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/all_users_list'
    | '/employees_login'
    | '/manager_options'
    | '/managers_login'
    | '/pending_tickets'
    | '/user_options'
    | '/user_tickets'
    | '/about'
  id:
    | '__root__'
    | '/'
    | '/all_users_list'
    | '/employees_login'
    | '/manager_options'
    | '/managers_login'
    | '/pending_tickets'
    | '/user_options'
    | '/user_tickets'
    | '/about'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AlluserslistRoute: typeof AlluserslistRoute
  EmployeesloginRoute: typeof EmployeesloginRoute
  ManageroptionsRoute: typeof ManageroptionsRoute
  ManagersloginRoute: typeof ManagersloginRoute
  PendingticketsRoute: typeof PendingticketsRoute
  UseroptionsRoute: typeof UseroptionsRoute
  UserticketsRoute: typeof UserticketsRoute
  AboutLazyRoute: typeof AboutLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AlluserslistRoute: AlluserslistRoute,
  EmployeesloginRoute: EmployeesloginRoute,
  ManageroptionsRoute: ManageroptionsRoute,
  ManagersloginRoute: ManagersloginRoute,
  PendingticketsRoute: PendingticketsRoute,
  UseroptionsRoute: UseroptionsRoute,
  UserticketsRoute: UserticketsRoute,
  AboutLazyRoute: AboutLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/all_users_list",
        "/employees_login",
        "/manager_options",
        "/managers_login",
        "/pending_tickets",
        "/user_options",
        "/user_tickets",
        "/about"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/all_users_list": {
      "filePath": "all_users_list.tsx"
    },
    "/employees_login": {
      "filePath": "employees_login.tsx"
    },
    "/manager_options": {
      "filePath": "manager_options.tsx"
    },
    "/managers_login": {
      "filePath": "managers_login.tsx"
    },
    "/pending_tickets": {
      "filePath": "pending_tickets.tsx"
    },
    "/user_options": {
      "filePath": "user_options.tsx"
    },
    "/user_tickets": {
      "filePath": "user_tickets.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
